const sendTelegramMessage = require("../helpers/sendTelegramMessage");
const { changeTable } = require("../helpers/checkOrders");
const { sendBatchToIndexing } = require("../helpers/indexingApi");
const fetch = require("node-fetch");
require("dotenv").config();

const userStates = {};

function parseBatchResponse(raw) {
  const results = [];
  const regex = /\{\s*"urlNotificationMetadata"[\s\S]*?\}\s*\}/g;
  const matches = raw.match(regex);

  if (!matches) return results;

  for (const m of matches) {
    try {
      const data = JSON.parse(m);
      results.push({ url: data.urlNotificationMetadata.url, status: "ok" });
    } catch (err) {
      results.push({
        url: null,
        status: "error",
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON",
      });
    }
  }

  return results;
}

async function bot(req, res, next) {
  const body = req.body;

  try {
    if (body.callback_query) {
      const callbackQuery = body.callback_query;
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;

      if (data === "UPDATE_MOTEA_ORDER_TABLE") {
        changeTable()
          .then(async () => {
            await sendTelegramMessage(
              "–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! https://docs.google.com/spreadsheets/d/16kaSBC3xnJQON80jYzUE5ok7N37R_vXGUmpJHX4A6Uw/edit",
              chatId
            );
          })
          .catch(async (error) => {
            console.error("Error updating table:", error);
            await sendTelegramMessage(
              `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã. ${error}`,
              chatId
            );
          });
      }

      return res
        .status(200)
        .send({
          method: "answerCallbackQuery",
          callback_query_id: callbackQuery.id,
        });
    }

    if (
      userStates[req.body.message.chat.id]?.step === "awaiting_urls" &&
      req.body?.message?.document
    ) {
      const chatId = req.body.message.chat.id;
      const fileId = req.body.message.document.file_id;

      try {
        const fileInfoRes = await fetch(
          `https://api.telegram.org/bot${process.env.BOT_TOKEN}/getFile?file_id=${fileId}`
        );
        const fileInfo = await fileInfoRes.json();
        if (!fileInfo.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_path");

        const filePath = fileInfo.result.file_path;

        const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
        const fileContentRes = await fetch(fileUrl);
        const fileContent = await fileContentRes.text();

        const urls = fileContent
          .split(/\r?\n/)
          .map((line) => line.trim())
          .filter((line) => line.startsWith("http"));

        if (urls.length === 0) {
          await sendTelegramMessage(
            "–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.",
            chatId
          );
          return res.status(200).send("ok");
        }

        await sendTelegramMessage(
          `–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é ${urls.length} URL –∏–∑ —Ñ–∞–π–ª–∞...`,
          chatId
        );

        const results = await sendBatchToIndexing(urls);
        const readable = parseBatchResponse(results[0].response);

        let okUrl = 0;
        let errUrl = 0;

        for (const obj of readable) {
          if (obj.status === "ok") {
            okUrl++;
          } else {
            errUrl++;
          }
        }

        const messageText = `–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:\n ${okUrl} URL - ‚úÖ \n ${errUrl} URL - ‚ùå`;
        await sendTelegramMessage(messageText, chatId);

        delete userStates[chatId];

        return res.status(200).send("ok");
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:", err);
        await sendTelegramMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª üòî", chatId);
        return res.status(200).send("ok");
      }
    }

    if (req.body?.message) {
      const { message } = req.body;
      if (!message || !message.chat || !message.text) {
        return res.status(200).send("ignored");
      }
      const chatId = message.chat.id;

      if (message.text === "/indexurl") {
        userStates[chatId] = { step: "awaiting_urls" };
        await sendTelegramMessage(
          "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª–æ–º.txt",
          chatId
        );

        return res.status(200).send("ok");
      }

      if (userStates[chatId]?.step === "awaiting_urls") {
        const urls = message.text
          .split(",")
          .map((u) => u.trim())
          .filter(Boolean);
        if (urls.length === 0) {
          await sendTelegramMessage(
            "–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            chatId
          );
          return res.status(200).send("ok");
        }

        await sendTelegramMessage(
          `–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é ${urls.length} URL...`,
          chatId
        );

        try {
          const results = await sendBatchToIndexing(urls);
          const readable = parseBatchResponse(results[0].response);

          let okUrl = 0;
          let errUrl = 0;

          for (const obj of readable) {
            if (obj.status === "ok") {
              okUrl++;
            } else {
              errUrl++;
            }
          }
          const messageText = `–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:\n ${okUrl}URL - ‚úÖ \n ${errUrl}URL - ‚ùå`;

          await sendTelegramMessage(messageText, chatId);
        } catch (error) {
          await sendTelegramMessage(
            `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: ${error.message}`,
            chatId
          );
        }

        delete userStates[chatId];

        return res.status(200).send("ok");
      }

      sendTelegramMessage(
        `–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–≥–æ —á–∞—Ç–∞: ${chatId}. –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ '${message.text}'`,
        chatId
      );

      res.status(200).send("ok");
    }
  } catch (error) {
    console.error("Error processing Telegram message:", error);
  }
}

module.exports = { bot };
