const OrdersArchive = require("../models/ordersArchive");
const User = require("../models/user");
const Product = require("../models/item");
const sendTelegramMessage = require("./sendTelegramMessage");
const { google } = require("googleapis");
const updateSheets = require("../helpers/updateSheets");

const fetchOrders = async () => {
  try {
    const result = [];
    const orders = await OrdersArchive.find({ statusId: "13" }).exec();
    for (const order of orders) {
      const orderData = {
        id: order.id,
        statusLabel: order.statusLabel,
        products: order.products.map((product) => ({
          amount: product.amount,
          sku: product.sku,
          isSet: product.isSet || [],
        })),
      };
      result.push(orderData);
    }
    return result;
  } catch (error) {
    console.error("Error fetching orders:", error);
  }
};

const changeTable = async () => {
  try {
    console.log("Changing table...");
    const client = new google.auth.JWT(
      process.env.GOOGLE_CLIENT_EMAIL,
      null,
      process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n"),
      ["https://www.googleapis.com/auth/spreadsheets"]
    );

    await client.authorize();

    const sheets = google.sheets({ version: "v4", auth: client });
    const spreadsheetId = "16kaSBC3xnJQON80jYzUE5ok7N37R_vXGUmpJHX4A6Uw";
    const range = "Bestellung!A:Z";
    await sheets.spreadsheets.values.clear({
        spreadsheetId,
        range,
    });
    const rows = [["order №", "sku", "amount", "Bestand"]];

    const targetOrders = await fetchOrders();
    const orderArray = [];

    for (const order of targetOrders) {
      for (const product of order.products) {
        if (
          product.isSet &&
          product.isSet?.length > 0 &&
          product.isSet[0] !== null
        ) {
          for (const item of product.isSet) {
            const targetChild = orderArray.find(order => order.item === item)
            if (!targetChild) {
                const child = { order: [order.id], item, amount: product.amount};
                orderArray.push(child);
            } else {
                targetChild.order.push(order.id);
                targetChild.amount += product.amount;
            }
          }
        } else {
            const targetChild = orderArray.find(order => order.item === product.sku)
            if (!targetChild) {
                const child = { order: [order.id], item: product.sku, amount: product.amount};
                orderArray.push(child);
            } else {
                targetChild.order.push(order.id);
                targetChild.amount += product.amount;
            }
        }
      }
    }

    const leverDetails = ['106156',
'114160',
'114162',
'114163',
'114164',
'114165',
'114168',
'114169',
'114170',
'114171',
'114172',
'115056',
'115057',
'115059',
'115122',
'115123',
'115124',
'115905',
'115907',
'115908',
'115918',
'115921',
'115929',
'115930',
'115988',
'115989',
'115990',
'116010',
'116040',
'116045',
'116082',
'116219',
'116233',
'116249',
'116250',
'116271',
'116276',
'116310',
'116314',
'116322',
'116358',
'116365',
'116366',
'116387',
'116472',
'117035',
'117037',
'117047',
'117067',
'117078',
'117081',
'117083',
'117086',
'117087',
'117093',
'117106',
'117109',
'117110',
'117115',
'117126',
'117127',
'117132',
'117135',
'117136',
'117149',
'117222',
'117231',
'117265',
'117315',
'117332',
'117337',
'117338',
'117340',
'117364',
'117368',
'117371',
'117396',
'117417',
'117425',
'117439',
'117456',
'117470',
'117488',
'117494',
'117496',
'117498',
'117502',
'117503',
'117506',
'117508',
'117520',
'117526',
'117550',
'117552',
'117557',
'117561',
'117568',
'117569',
'117571',
'117572',
'117584',
'117588',
'117620',
'117741',
'117755',
'117820',
'117822',
'118134',
'118191',
'118212',
'118214',
'118216',
'118217',
'118231',
'118235',
'118239',
'118240',
'118257',
'118258',
'118260',
'118272',
'118274',
'118276',
'118280',
'118282',
'118283',
'118286',
'118287',
'118288',
'118295',
'118296',
'118297',
'118299',
'118301',
'118303',
'118304',
'118314',
'118320',
'118335',
'118336',
'118337',
'118342',
'118347',
'118351',
'118352',
'118353',
'118359',
'118360',
'118361',
'118364',
'118370',
'118371',
'118372',
'118387',
'118401',
'118411',
'118412',
'118415',
'118419',
'118424',
'118425',
'118434',
'118437',
'118452',
'118468',
'118469',
'118479',
'118491',
'118496',
'118506',
'118508',
'118509',
'118510',
'118516',
'118523',
'118527',
'118529',
'118531',
'118537',
'118539',
'118542',
'118546',
'118550',
'118554',
'118560',
'118564',
'118573',
'118574',
'118575',
'118579',
'118593',
'118613',
'118620',
'118625',
'118626',
'118627',
'118641',
'118644',
'118645',
'118647',
'118648',
'118652',
'118654',
'118655',
'118657',
'118663',
'118666',
'118667',
'118674',
'118675',
'118677',
'118678',
'118679',
'118680',
'118687',
'118689',
'118695',
'118696',
'118698',
'118711',
'118716',
'118718',
'118722',
'118724',
'118727',
'118729',
'118730',
'118732',
'118737',
'118743',
'118745',
'118746',
'118751',
'118753',
'118754',
'118760',
'118762',
'118763',
'118786',
'118789',
'118790',
'118794',
'118795',
'118796',
'118805',
'118812',
'118813',
'118907',
'118995',
'118996',
'119086',
'119129',
'119147',
'119293',
'119368',
'119892',
'137407',
'137407',
'137408',
'137408',
'137409',
'137409',
'137413',
'137413',
'138124',
'138124',
'138125',
'138125',
'138126',
'138126',
'138127',
'138127',
'145473',
'145790',
'145795',
'145796',
'145799',
'162004',
'162011',
'162039',
'162053',
'162099',
'162102',
'162104',
'162114',
'162117',
'162123',
'189283',
'200001',
'200002',
'200003',
'200004',
'200005',
'200005',
'200006',
'200007',
'200020',
'200021',
'200021',
'200022',
'200022',
'200023',
'200023',
'200024',
'200024',
'200025',
'200025',
'200026',
'200026',
'200027',
'200028',
'200028',
'200029',
'200029',
'200030',
'200030',
'200031',
'200032',
'200033',
'200034',
'200035',
'200036',
'200038',
'200039',
'200040',
'200041',
'200042',
'200043',
'200044',
'200045',
'200045',
'200046',
'200047',
'200048',
'200049',
'200050',
'200051',
'200051',
'200052',
'200053',
'200054',
'200055',
'200056',
'200069',
'200070',
'200071',
'200072',
'200072',
'200073',
'200074',
'200076',
'200077',
'200078',
'200078',
'200079',
'200080',
'200123',
'200124',
'200125',
'200126',
'200127',
'200127',
'200128',
'200128',
'200129',
'200130',
'200139',
'200140',
'200141',
'200142',
'200143',
'200145',
'200145',
'200146',
'200147',
'200148',
'200148',
'200149',
'200150',
'200154',
'200158',
'200158',
'200159',
'200159',
'200160',
'200160',
'200161',
'200161',
'211717',
'211720',
'213904',
'213906',
'214930',
'278013',
'278063',
'278098',
'278099',
'278334',
'278346',
'278347',
'278375',
'278376',
'278389',
'278390',
'288468',
'296667',
'296670',
'296675',
'298594',
'298597',
'298599',
'298602',
'298602',
'298605',
'298606',
'298609',
'298614',
'298618',
'298624',
'298626',
'298626',
'298627',
'298628',
'298629',
'298630',
'298632',
'298633',
'298633',
'298635',
'298636',
'298637',
'298638',
'298640',
'298641',
'298641',
'298642',
'298643',
'298644',
'298645',
'298646',
'298650',
'298653',
'298654',
'298655',
'298657',
'298659',
'300420',
'302195',
'302248',
'302795',
'302796',
'302797',
'302798',
'302799',
'302800',
'302926',
'302927',
'302928',
'302929',
'302930',
'302931',
'302933',
'303896',
'304128',
'304129',
'304129',
'304146',
'304149',
'304154',
'304154',
'304155',
'304159',
'304159',
'304167',
'304173',
'304175',
'304176',
'309349',
'317987',
'325745',
'325746',
'325747',
'325748',
'325749',
'325750',
'325751',
'325752',
'331961',
'333301',
'333305',
'343279',
'343279',
'343280',
'343280',
'343281',
'343282',
'343283',
'343284',
'343285',
'343286',
'385536',
'385536',
'385537',
'392249',
'392250',
'392251',
'392252',
'392253',
'392254',
'392255',
'392256',
'392257',
'392258',
'396504',
'400274',
'436208',
'448646',
'448647',
'448648',
'448649',
'448650',
'448651',
'448656',
'448658',
'448659',
'448661',
'448662',
'483316',
'948402',
'948402',
'998329',
'998330',
'998336',
'998340',
'998376',
'A047913',
'A047968',
'A048067',
'A048068',
'A048159',
'A048214',
'A048228',
'A048232',
'A048240',
'A048260',
'A049130',
'A050190',
'A050193',
'A050194',
'A050195',
'A050197',
'A050198',
'A050198',
'A050199',
'A050199',
'A121290',
'A121351',
'A121378',
'A121390',
'A126389',
'A127568',
'A128422',
'A129145',
'A131041',
'A131114',
'A131892',
'A131899',
'A131982',
'A132289',
'A132375',
'A132377',
'A132669',
'A133098',
'A133101',
'A133197',
'A133787',
'A134708',
'A134722',
'A135192',
'A150032',
'A291088',
'A305205',
'A305384',
'A305410',
'A305418',
'A305423',
'A305425',
'A410201',
'A410259',
'A428369',
'A444330',
'A469532',
'A469545',
'A486640',
'A486684',
'A486686',
'A518353',
'A518357',
'A576687',
'A600545',
'A631798',
'A632047',
'A632050',
'A632260',];

    for (const i of orderArray) {
      const product = await Product.findOne({article: i.item}).exec();
      if (product.quantityInStock >= i.amount && !leverDetails.includes(i.item)) continue;
      const row = [i.order.join(', '), i.item, i.amount]; 
      rows.push(row);
    }
    
    await updateSheets(sheets, spreadsheetId, range, rows);
  } catch (error) {
    console.error("Error changing table:", error);
  }
};

async function checkOrdersToOrder() {
  const owners = await User.find({ role: "owner" }).exec();

  try {
    const result = await fetchOrders();
    const message = `Проверка заказов завершена. Найдено ${result.length} заказов в статусе "Заказать".
    Хотите чтобы я вписал их в щаблон заказа Motea?

*Это полностью перезапишет данные в таблице, если нужно, сделайте копию.`;

    const replyButtons = {
      inline_keyboard: [
        [
          {
            text: "Вписать в шаблон",
            callback_data: "UPDATE_MOTEA_ORDER_TABLE",
          },
        ],
      ],
    };

    for (const owner of owners) {
      if (owner?.chatId && owner?.chatId !== "") {
        await sendTelegramMessage(message, owner.chatId, replyButtons);
      }
    }
  } catch (error) {
    console.log("Error checking orders to order:", error);
  }
}

module.exports = { checkOrdersToOrder, changeTable };
